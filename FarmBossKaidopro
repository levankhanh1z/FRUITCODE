-- Thêm biến để kiểm tra trạng thái bật/tắt teleport
local teleportEnabled = true

-- Hàm kiểm tra xem có thể teleport không
local function canTeleport()
    return teleportEnabled and game.Players.LocalPlayer.Character and game.Workspace.Characters.NPCs:FindFirstChild("Kaido")
end

-- Bắt đầu theo dõi sự kiện nhấn phím
game:GetService("UserInputService").InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.H then
        -- Đảo ngược trạng thái bật/tắt khi nhấn phím H
        teleportEnabled = not teleportEnabled
        print("Teleport " .. (teleportEnabled and "Enabled" or "Disabled"))
    end
end)

-- Đoạn mã chính của bạn
spawn(function()
    while wait(0.1) do
        pcall(function()
            local plr = game.Players.LocalPlayer.Character
            if not plr then
                wait(2)
                local Replicator = game:GetService("ReplicatedStorage").Replicator
                local args = {
                    [1] = "Core",
                    [2] = "LoadCharacter",
                    [3] = {}
                }
                Replicator:InvokeServer(unpack(args))

                local ReplicatorNoYield = game:GetService("ReplicatedStorage").ReplicatorNoYield
                args = {
                    [1] = "Main",
                    [2] = "Core",
                    [3] = {}
                }
                ReplicatorNoYield:FireServer(unpack(args))

                args = {
                    [1] = "Main",
                    [2] = "LoadCharacter"
                }
                ReplicatorNoYield:FireServer(unpack(args))
            else
                local path = game.Players.LocalPlayer.PlayerGui.UI.HUD.Bars.ProgressStamina.Text
                local exit = split(path, "/")
                local humanoid = plr:FindFirstChildOfClass("Humanoid")

                if humanoid and humanoid.Health < 100 then
                    humanoid.Health = 0
                else
                    _G.Toggle = true
                    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        local x = string.split(v.Name, " ")
                        if x[2] then
                            v.Name = x[1] .. x[2]
                        end
                    end

                    task.wait(0.1)

                    local kaidoFolder = game.Workspace.Characters.NPCs:FindFirstChild("Kaido")
                    if canTeleport() then
                        local kaido = kaidoFolder:FindFirstChild("Kaido")

                        if kaido then
                            local humanoidRootPart = kaido:FindFirstChild("HumanoidRootPart")

                            -- Kiểm tra HumanoidRootPart và sử dụng Position để teleport
                            if humanoidRootPart and humanoidRootPart:IsA("BasePart") then
                                plr:SetPrimaryPartCFrame(humanoidRootPart.CFrame * CFrame.new(0, 0, 3))
                            end
                        end
                    end

                    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        local ohString1 = game.Players.LocalPlayer["MAIN_DATA"].Slots[game.Players.LocalPlayer["MAIN_DATA"].Slot.Value].Value
                        local ohString2 = v.Name
                        local ohTable3 = {}
                        game:GetService("ReplicatedStorage").Replicator:InvokeServer(ohString1, ohString2, ohTable3)
                        --print(ohString1)
                    end
                end
            end
        end)
    end
end)

-- Đoạn mã xử lý idling
spawn(function()
    while task.wait(.1) do
        pcall(function()
            local vu = game:GetService("VirtualUser")
            game:GetService("Players").LocalPlayer.Idled:connect(function()
                vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
                wait(1)
                vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            end)
        end)
    end
end)

-- Đoạn mã xử lý thông tin cấp độ và kinh nghiệm
spawn(function()
    while task.wait(1) do
        pcall(function()
            local LocalLevel = game:GetService("Players").LocalPlayer.PlayerGui.UI.HUD.Level.Text
            local LocalEXP = game:GetService("Players").LocalPlayer.PlayerGui.UI.HUD.EXP.Text
            local LocalStamina = game:GetService("Players").LocalPlayer.PlayerGui.UI.HUD.Bars.ProgressStamina.Text
            local playersFolder = workspace.Characters:FindFirstChild("Players")

            if not playersFolder or #playersFolder:GetChildren() == 0 then
                -- Gọi hàm load character khi không có Players trong workspace.Characters
                local Replicator = game:GetService("ReplicatedStorage").Replicator
                local args = {
                    [1] = "Core",
                    [2] = "LoadCharacter",
                    [3] = {}
                }
                Replicator:InvokeServer(unpack(args))

                local ReplicatorNoYield = game:GetService("ReplicatedStorage").ReplicatorNoYield
                args = {
                    [1] = "Main",
                    [2] = "Core",
                    [3] = {}
                }
                ReplicatorNoYield:FireServer(unpack(args))

                args = {
                    [1] = "Main",
                    [2] = "LoadCharacter"
                }
                ReplicatorNoYield:FireServer(unpack(args))
            end
        end)
    end
end)
